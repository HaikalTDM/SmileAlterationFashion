uiux-guidelines.md


This document outlines the complete UI/UX design system and development practices for creating premium, authentic, and production-ready applications. It is intended to serve as a foundational reference guide for both human developers and AI assistants within a development environment like Cursor IDE.


Design Language Summary


Category
	Token Name
	Value / Description
	Color
	primary
	#0A84FF (A vibrant, accessible blue for interaction)
	

	neutral
	A 10-step grayscale from #FFFFFF to #1C1C1E
	

	success
	#30D158
	

	warning
	#FFD60A
	

	error
	#FF453A
	Typography
	font-sans
	Inter, system-ui, sans-serif
	

	font-mono
	ui-monospace, Menlo, Monaco, monospace
	

	base-size
	16px (with a 1.5 line height)
	Spacing
	base-unit
	4px
	

	grid-increment
	8px (2 * base-unit)
	Sizing
	touch-target
	44px (11 * base-unit)
	Borders
	border-radius
	8px (rounded-lg)
	

	border-width
	1px
	Shadows
	shadow-md
	Two-layer soft shadow for standard elevation
	

1. Design Philosophy & Principles


This section establishes the foundational mindset behind all design and development decisions. The goal is to create interfaces that are not just functional but also intuitive, efficient, and aesthetically refined. The principles outlined here provide the "why" behind the specific rules in the Design Language System, guiding the creation of experiences that feel intentional and human-designed.


1.1 Core Principles: The 'Calm Productivity' Ethos


The guiding philosophy is 'Calm Productivity'. This ethos synthesizes the focus and tranquility of mindfulness applications with the speed and efficiency of high-performance productivity tools. The objective is to build interfaces that empower users to achieve their goals effectively without inducing stress or cognitive overload. Every design choice must support this dual objective of focus and flow.
* Human-Centered & Intentional: Every element, from a button's placement to an animation's timing, must serve a clear purpose. The design process must begin by solving the real user problem, a core principle at firms like Revolut, which emphasizes deep analysis of user needs before building.1 This approach avoids superfluous features and ensures the final product is a simple, beautiful solution to a complex need.2 The interface should feel like a well-crafted tool that anticipates user needs rather than a collection of disparate features.
* Minimalism as Clarity: Minimalism is not merely an aesthetic preference but a functional requirement for reducing cognitive load. Inspired by the design of tools like Linear, the system prioritizes clarity and speed by eliminating unnecessary elements.3 The interface avoids clutter, pop-ups, and busy sidebars, allowing users to focus on the task at hand.4 This aligns with the principle of "saying no to busy work," where the tool should automate or remove "work around work" so users can focus on what truly matters.5
* Craftsmanship & Quality: There is a fervent commitment to the quality of craft, a value deeply embedded in the culture of world-class product teams like Linear and Stripe.6 This translates to a meticulous attention to detail in the UI. Every pixel, every transition, and every interaction state is considered and refined. This pursuit of excellence ensures the final product feels surprisingly great, robust, and reliable, which in turn builds user trust.
* Rhythm & Balance: A consistent and predictable visual rhythm makes an interface feel harmonious and intuitive. This is achieved through the rigorous application of a spacing system, a modular typographic scale, and a clear visual hierarchy. The result is an experience that feels calm and structured, reducing cognitive load and allowing users to navigate naturally. This principle is central to the design of Airbnb, where generous and consistent spacing creates a feeling of trust and relaxation.8


1.2 Guiding Heuristics


These heuristics are practical rules of thumb that translate the core philosophy into actionable design guidance.
* Consistency: A component or pattern, once defined, must look and behave the same way everywhere it is used. This is a cornerstone of any mature design system. Revolut's emphasis on modular solutions highlights that a consistent user experience prevents users from having to waste time learning new features or patterns.1 This consistency builds predictability and makes the application easier to master.
* Hierarchy: The most important information and actions must be the most visually prominent. This is achieved through the strategic use of size (typography), color (accent vs. neutral), and elevation (shadows). A clear hierarchy guides the user's attention, making the interface scannable and reducing the time it takes to find information or complete a task.9
* Feedback: The system must immediately acknowledge user actions and clearly communicate its status. Interactive elements should change state on hover or press, data submission should trigger loading indicators, and successful actions should result in clear confirmation.10 This constant dialogue between the user and the interface provides reassurance and a sense of control, preventing confusion and frustration.11
* Flexibility & Scalability: The design system must be robust enough to provide consistency but flexible enough to adapt to new challenges and scale with the product. This is informed by Spotify's "Encore" framework, which is a "system of systems" designed to support autonomy and a diverse set of use cases across many platforms.12 The approach is to build upon a strong, shared foundation of design tokens and principles that can be composed into more complex, context-specific components and patterns.
The most successful applications do not simply adopt a generic "premium" aesthetic; their design language is an authentic and direct expression of their core product philosophy. Calm's interface is intentionally slow and immersive to promote mindfulness, even removing features like fast-forward to enforce this state.14 Conversely, Linear's interface is dense, keyboard-first, and stark to maximize efficiency for power users.4 The "Calm Productivity" ethos provides a unique philosophical core from which all subsequent design decisions will authentically flow, ensuring the final product feels cohesive and purpose-built.


2. Design Language System


This section defines the atomic, non-negotiable building blocks of the visual language. These tokens and rules translate the design philosophy into a concrete, scalable, and consistent system. Adherence to this system is the primary mechanism for achieving a high-quality, human-designed feel and avoiding the inconsistencies that mark generic or AI-generated interfaces.


2.1 Color Palette & Usage


Color is a powerful tool for establishing hierarchy, communicating state, and evoking emotion. The palette is designed to be minimal, functional, and accessible, prioritizing clarity over decoration.
* Palette Definition: The color system is divided into functional roles, a best practice in modern UI design that ensures consistency and usability.15
   * Primary / Accent: A single, vibrant blue (#0A84FF) is used for all primary interactive elements, such as buttons, active links, and focused input fields. This color is chosen for its high visibility and professional yet energetic feel, similar to the palettes used in modern fintech and productivity apps.17 Using a single accent color creates a clear visual path for the user, guiding them to key actions.
   * Neutrals: A 10-step grayscale palette provides the foundational structure of the UI. This extensive range allows for subtle distinctions in hierarchy, borders, and background layers without relying on color, creating a clean and focused aesthetic reminiscent of Notion and Linear.4
      * neutral-1000 (Text/High Contrast): #1C1C1E
      * neutral-800 (Headings/Subtle Text): #636366
      * neutral-600 (Borders/Dividers): #C6C6C8
      * neutral-400 (Input Borders): #E5E5EA
      * neutral-200 (Subtle Borders/Lines): #F2F2F7
      * neutral-100 (Element Backgrounds): #F9F9F9
      * neutral-0 (Page Background): #FFFFFF
      * Dark mode equivalents would be defined as an inverted scale.
   * Feedback Colors: A standard set of semantic colors is used to communicate system status. These colors must be used consistently for their intended purpose to maintain clear communication with the user.15
      * Success: #30D158 (For confirmation messages, successful validation)
      * Warning: #FFD60A (For non-blocking alerts or cautionary information)
      * Error / Destructive: #FF453A (For form errors, failed actions, and destructive operations like 'Delete')
* Usage Rules:
   * The 60-30-10 Rule: To maintain a clean and balanced interface, colors should be applied following a variation of this classic design rule: approximately 60% of the UI should be the primary neutral background (neutral-0), 30% should be secondary neutrals (for containers, text, etc.), and 10% should be the accent color for interactive elements.16
   * Accessibility: All text and UI elements must meet WCAG 2.1 AA contrast ratios. The defined primary and feedback colors have been checked for a minimum 4.5:1 contrast ratio against the primary neutral backgrounds.20 Color should never be the sole means of conveying information; it must be paired with an icon or text label.21
   * Gradients: Gradients should be used sparingly, primarily for branding moments or as very subtle background enhancements. They should be soft, composed of analogous colors from the palette, and never used in a way that compromises text legibility.


2.2 Typography & Modular Scale


Typography is the primary vehicle for information in the UI. The system is designed for maximum legibility, clear hierarchy, and rhythmic consistency across all devices.
* Font Selection:
   * Sans-Serif (Primary): Inter. This typeface is chosen for its exceptional legibility at all sizes, its neutral yet professional character, and its extensive weight and feature set. The focus on legibility is paramount, drawing lessons from Airbnb's development of their custom typeface, 'Cereal', which prioritized high x-height and distinct letterforms for UI clarity.22
   * Monospace (Secondary): A system monospace stack (ui-monospace, Menlo, etc.) is used for code snippets or tabular data to ensure proper alignment and clarity, a common practice in documentation-heavy apps like Notion.19
* Modular Scale: A typographic scale based on a mathematical ratio ensures a harmonious and predictable hierarchy. A Major Third (1.250) scale is used, with a base font size of 16px for body text. This provides clear differentiation between heading levels without being overly dramatic, suitable for data-dense applications.23
   * caption (12.8px)
   * body-sm (14px - exception for density)
   * body (16px) - Base
   * heading-sm (20px)
   * heading-md (25px)
   * heading-lg (31.25px)
   * heading-xl (39.06px)
* Line Height: Line height is critical for readability. It is not set as a unitless value but is calculated to align with the 8-point grid, ensuring vertical rhythm. The base line height for body text is 24px ($1.5 \times 16px$), which is a multiple of 8.25 All other line heights in the scale should also be multiples of 4 or 8.
* Weights & Styles: Font weights are used semantically to reinforce hierarchy.
   * Regular (400): For all body copy and paragraph text.
   * Medium (500): For UI elements like button labels and input text to give them slightly more presence.
   * SemiBold (600) / Bold (700): For headings, to create clear separation and guide the user's eye.


2.3 The 8-Point Spacing Grid System


The 8-point grid is the most critical rule for achieving a clean, consistent, and professional-looking layout. It eliminates arbitrary spacing decisions and creates a harmonious visual rhythm.
* Core Rule: All sizing, margins, and padding must use increments of 8px (e.g., 8, 16, 24, 32). For finer-grained control in dense components, a 4px increment may be used, but 8px is the default.25 This system is chosen for its scalability across different screen densities and its ease of communication between designers and developers.25
* Spacing Scale (Tokens): A tokenized scale is defined for use in Tailwind's configuration. This ensures that only pre-approved spacing values are used.
   * space-1: 4px
   * space-2: 8px
   * space-3: 12px
   * space-4: 16px
   * space-5: 24px
   * space-6: 32px
   * space-7: 48px
   * space-8: 64px
* Layout Principle: The Proximity Rule: Spacing is used to communicate relationships. The "internal ≤ external" rule dictates that space inside a component (padding) should be less than or equal to the space between it and other components (margin).26 This creates clear visual groupings and makes the UI easier to parse. For example, items in a list might have 16px of vertical margin between them, while the list itself has 24px of margin separating it from the next section.


2.4 Shadows, Borders, and Depth


Subtle and realistic depth is a key differentiator between a generic, flat UI and a polished, tangible one. The shadow system is designed to mimic real-world lighting, creating a clear sense of elevation and hierarchy.
* The Physics of Realistic Shadows: A key to avoiding a flat, "AI-generated" look is to move beyond single, harsh box-shadow values. Realistic shadows are composed of multiple layers: a soft, diffuse ambient shadow and a more defined key light shadow.9
   * Shadow Color: Shadows in the real world are not pure black. The shadow color will be a desaturated, transparent version of the neutral palette (e.g., hsl(220, 15%, 5%, 0.1)), which appears far more natural than a simple rgba(0, 0, 0, 0.1).27
* Elevation System: A tiered system of shadows defines the Z-axis hierarchy of the interface. Higher elevation signifies greater importance or temporary status (like a modal).
   * Level 1 (shadow-sm): For subtle interactive elements on hover or small, slightly raised components.
      * 0 1px 2px hsl(220, 15%, 5%, 0.05), 0 1px 3px hsl(220, 15%, 5%, 0.1)
   * Level 2 (shadow-md): The default for primary containers like cards.
      * 0 4px 6px -1px hsl(220, 15%, 5%, 0.1), 0 2px 4px -2px hsl(220, 15%, 5%, 0.1)
   * Level 3 (shadow-lg): For temporary, elevated surfaces like dropdown menus and modals that sit above all other content.
      * 0 10px 15px -3px hsl(220, 15%, 5%, 0.1), 0 4px 6px -4px hsl(220, 15%, 5%, 0.1)
* Borders: Borders are used to define the shape of elements that do not have shadow elevation. They should be subtle and high-contrast.
   * Width: 1px.
   * Color: A shade from the neutral palette that provides just enough contrast (e.g., neutral-400 for inputs on a neutral-0 background).


2.5 Iconography and Illustration Style


Icons and illustrations provide visual communication, but must adhere to the system's minimalist and functional ethos.
* Iconography:
   * Set: Lucide (or a similar high-quality, open-source set like Heroicons). Using a single, comprehensive set ensures visual consistency.
   * Style: Line-based (stroked) icons are the default. The stroke width should be consistent (e.g., 1.5px). Filled icons are reserved for indicating an active or selected state. This approach was successfully used by Spotify in their icon system refresh.28
   * Sizing: Icons must be sized to fit the 8-point grid (e.g., 16px, 24px, 32px) to ensure proper alignment with text and other elements.29
* Illustrations:
   * Usage: Illustrations should be used sparingly, primarily for empty states, onboarding flows, or celebratory moments. They should not be purely decorative.
   * Style: The style should be minimal, abstract, and often monochromatic (using shades of the neutral palette). This aligns with the clean, professional aesthetic of apps like Notion and avoids a cartoonish feel that can undermine a product's perceived quality.30
The perceived quality of an interface comes not from any single flashy element, but from the fanatical and rigorous application of these foundational rules. Apps like Linear and Revolut feel professional because there are no arbitrary values; every margin, font size, and shadow is part of a predictable, harmonious system.3 This consistency creates a subconscious feeling of quality and trustworthiness, signaling that the product was built with care. Therefore, these foundational tokens are not suggestions but inviolable laws of the design system.


3. UI Component Standards


This section moves from atomic tokens to molecular components, defining the appearance, behavior, and construction of reusable UI elements. Each component is an embodiment of the design philosophy and a practical application of the design language system.


3.1 Core Principles


These principles apply to all interactive components within the system.
* Component States: A UI that does not respond to interaction feels broken. All interactive components must have clearly defined visual styles for all relevant states. This is a fundamental aspect of creating a responsive and high-quality user experience.10
   * Default: The component's resting state.
   * Hover: Signals interactivity when a user's pointer is over the element. Typically involves a subtle change in background color or shadow.
   * Focus: Indicates that an element is selected via keyboard navigation. Must be highly visible, typically using a distinct outline or "focus ring" to meet accessibility standards.
   * Pressed/Active: Provides immediate feedback that a click or tap has been registered. Usually a slightly darker or inset appearance.
   * Disabled: Clearly indicates that a component is not interactive. This is achieved by reducing opacity and setting pointer-events: none.
* Responsiveness: Components are designed using a mobile-first approach. They should be fluid and adapt gracefully to different screen sizes using Tailwind's responsive prefixes (e.g., md:, lg:).
* Accessibility (A11y): Components must be built to be accessible from the ground up. This includes using semantic HTML (e.g., <button>, <nav>), providing text alternatives for icons, and using ARIA attributes where necessary to communicate state to assistive technologies.20


3.2 Buttons & Inputs


These are the most fundamental interactive elements in any application.
* Buttons:
   * Variants:
      * Primary: Solid accent color background (bg-primary). For the main call-to-action on a page.
      * Secondary: Neutral background with colored text (bg-neutral-100 text-primary). For secondary actions.
      * Tertiary (Ghost): No background, colored text (bg-transparent text-primary). For low-emphasis actions.
      * Destructive: Solid error color background (bg-error). For actions that delete data or have significant consequences.
   * Sizing: Sizes (sm, md, lg) are defined by their horizontal and vertical padding, which must adhere to the 8-point grid. The minimum touch target size of 44px must be respected on mobile.20
* Inputs (TextField, TextArea, Select):
   * Structure: A clean, simple design inspired by Stripe's highly usable forms.33
   * Styling: A default state with a light neutral border (border-neutral-400).
   * States:
      * Focus: The border color changes to the primary accent color (border-primary) and a soft outer glow (box-shadow) is applied.
      * Error: The border color changes to the error color (border-error). An error message should appear below the input.
      * Disabled: The background color is changed to a subtle gray (bg-neutral-100) and the element is not interactive.


3.3 Cards & Containers


Cards are the primary method for grouping related content into a single, digestible unit.
* Structure: The standard Card component is a container with consistent internal padding (p-4 or p-6), a defined border radius (rounded-lg), a subtle border (border border-neutral-200), and a default elevation shadow (shadow-md). This pattern is effectively used in apps like Calm to create an organized, easy-to-traverse interface.14
* Layout: Content within cards must adhere to the 8-point grid. For example, a heading might be followed by a paragraph with mt-2 (8px) of space, and the content block might have mt-4 (16px) of space before the action buttons at the bottom.


3.4 Navigation Elements


* Tabs: Used for switching between different views within the same context.
   * Style: Active tabs must be clearly differentiated using a combination of a bolder font weight and a colored indicator line (border-b-2 border-primary). Inactive tabs remain subtle.
* Menus (Dropdowns):
   * Appearance: Dropdown menus should appear with a Level 3 elevation (shadow-lg) to visually lift them above the content they cover.
   * Items: Menu items must have clear hover and active states. For accessibility, they should be fully navigable via keyboard. The use of pre-built, accessible primitives like those from Radix UI (which Linear uses) is highly recommended.35


3.5 Modals & Overlays


Modals are used for critical tasks or information that must interrupt the user's flow.
* Structure: A standard modal consists of a semi-transparent backdrop overlay to de-emphasize the page content, and a Card-like container for the modal content itself.
* Elevation: Modals must use the highest elevation shadow (shadow-lg) to signify they are on top of all other content.9
* Content: A modal should always have a clear, scannable title (using a heading style), a close button (<X> icon), and explicit action buttons (e.g., "Confirm", "Cancel").


3.6 Animation & Micro-interaction Principles


The perceived quality of an interface is disproportionately affected by its responsiveness and the quality of its micro-interactions. A static UI feels cheap and lifeless, while a thoughtfully animated one feels polished and trustworthy.
* Purpose-Driven Motion: Animation is not decoration. Every motion must serve a clear purpose, such as providing feedback, guiding attention, or illustrating a state change.10
   * Feedback: A button press should trigger a subtle scale(0.98) transform to mimic a physical press. A successful form submission might trigger a checkmark animation.
   * State Change: When an item is added to a list, it should fade in and slide down. When deleted, it should fade out and shrink. This visually explains what happened.
   * Guidance: When a modal appears, it can subtly scale up from the center to draw the user's eye.
* Properties of Natural Motion:
   * Duration: Transitions should be quick and feel responsive, typically between 150ms and 300ms. Slower animations feel sluggish and frustrating.
   * Easing: Avoid linear easing. Use ease-out curves (cubic-bezier(0, 0, 0.2, 1)) for elements entering the screen, and ease-in curves for elements leaving. This mimics real-world physics and feels more natural.
   * Performance: Animate only transform (translate, scale, rotate) and opacity. Animating properties like width, height, or margin is computationally expensive, triggering layout reflows and leading to janky, unprofessional animations.
These small moments of feedback build a constant, subconscious dialogue between the user and the interface. A successful dialogue builds trust and a feeling of control. A failed dialogue creates frustration. Therefore, component standards must treat states and micro-interactions as first-class citizens, not afterthoughts.


4. UX Flow Patterns


This section documents standardized solutions for common, multi-step user journeys. By using established patterns, the application ensures a consistent, predictable, and intuitive experience that reduces the learning curve for new users and streamlines tasks for existing ones. These flows are designed to manage the user's psychological state—their motivation, cognitive load, and sense of control—at each step.


4.1 Onboarding & First-Use Experience


Pattern: Value-First, Progressive Onboarding
The goal of onboarding is not to showcase every feature, but to guide the user to their first "aha!" moment as quickly as possible. This pattern, used effectively by apps like Calm and Duolingo, prioritizes immediate value and engagement over a comprehensive but tedious feature tour.14
* Flow Steps:
   1. Minimal Welcome Screens (Max 3): Use a few brief screens to communicate the core value proposition. Focus on the benefits to the user ("Sleep more," "Stress less") rather than the features of the app ("500+ Sleep Stories").14 Each screen should have a single, clear purpose and a prominent skip option.36
   2. Immediate Engagement: Whenever possible, allow the user to interact with the app's core functionality before requiring sign-up. For a note-taking app, let them create their first note. For a project management tool, let them create a sample task. This demonstrates value through action, which is more powerful than any description.36
   3. Deferred & Seamless Sign-Up: Only prompt the user to create an account when it is necessary to save their progress or access collaborative features. When the prompt appears, prioritize frictionless methods like social logins (Google, Apple) to reduce the barrier to entry.37
   4. Contextual Guidance (Progressive Disclosure): Instead of an upfront tour, introduce features contextually using tooltips, hotspots, or small modals when the user first encounters them.38 For example, when a user first opens the "sharing" menu, a tooltip can explain how it works. This "just-in-time" learning is less overwhelming and more effective.36


4.2 Authentication & Profile Management


Pattern: Secure and Frictionless Access
Authentication is a necessary hurdle, but it should be as low as possible. This flow prioritizes modern, secure, and user-friendly methods to get the user into the app quickly.
* Flow Steps:
   1. Clear Entry Points: The initial screen should clearly differentiate between "Log In" for existing users and "Sign Up" for new users, often with one styled as the primary action and the other as a secondary link.37
   2. Passwordless First: Prominently feature social logins (e.g., "Continue with Google") and passkey options above the traditional email/password form. These methods are more secure and significantly reduce user friction.39
   3. Inline Form Validation: For traditional sign-up, provide immediate, real-time feedback on form fields. Indicate password strength, validate email format as the user types, and show a green checkmark for valid fields. This prevents the frustration of submitting a form only to find an error.10
   4. Simple Password Recovery: The "Forgot Password" flow should be simple: a single field for the user's email, which triggers a secure reset link to be sent.41
   5. Profile Setup: After initial sign-up, profile completion can be part of the onboarding. Keep the initial required fields to a minimum (e.g., just a name) and allow the user to add more details later in their profile settings.


4.3 Dashboard & Main Navigation Patterns


Pattern: Focused & Contextual Navigation
For complex applications, the navigation and dashboard must provide a clear overview and easy access to key areas without overwhelming the user.
* Navigation Structure:
   * Web/Desktop: A persistent vertical sidebar is the preferred pattern for applications with numerous top-level sections (e.g., Notion, Linear, Figma). It scales better than a horizontal top bar and provides a stable anchor for the user.42
   * Mobile: A bottom tab bar with 3-5 primary destinations is the standard. The central tab can be used for the most frequent action, as seen in Calm's "Meditate" button.14 A hamburger menu can house less-frequently accessed items.
* Dashboard Design:
   * Information Hierarchy: The dashboard must immediately answer the user's most important questions. Key metrics and summaries should be presented first, using large, bold typography and clear data visualizations. The layout should follow a logical F- or Z-pattern, placing the most critical information in the top-left.43
   * Progressive Disclosure: Dashboards should provide an at-a-glance summary. Deeper details should be available on demand, via tooltips on hover, or by clicking a card to navigate to a detailed view. This keeps the main dashboard clean while still providing access to granular data.44
   * Actionability: A good dashboard doesn't just display information; it enables action. Include clear CTAs or quick-add buttons (e.g., "New Project") directly within the relevant dashboard sections.


4.4 Settings & User Preferences


Pattern: Grouped and Discoverable
The settings area should be organized and easy to navigate, allowing users to feel in control of their experience.
* Structure: Group related settings into logical categories (e.g., "Profile," "Notifications," "Billing," "Appearance"). Use a sub-navigation pattern, such as a vertical list on the left, to allow users to easily switch between these sections.
* Clarity and Control: Each setting should have a clear, concise label. For complex settings, provide a short, one-sentence helper text below the label to explain its function. Use appropriate controls for each setting type (e.g., a toggle switch for binary options, radio buttons for a selection from a small set of options).


4.5 System Feedback & Notifications


Pattern: Timely and Unobtrusive Communication
The system needs to communicate with the user, but it must do so in a way that respects their focus and context.
* Toasts / Snackbars: Use for low-priority, temporary feedback that does not require user action (e.g., "Changes saved," "Item added to cart"). They should appear briefly (3-5 seconds) in a consistent location (e.g., bottom-left or top-right) and then automatically dismiss.33
* Banners / Alerts: Use for higher-priority, persistent information that the user needs to be aware of but that doesn't block their workflow (e.g., "Your trial expires in 3 days"). These typically appear at the top of the screen and can be manually dismissed by the user.33
* Modals: Use only for critical, blocking actions that require a user's explicit decision before they can continue (e.g., confirming a deletion, accepting terms of service). Overusing modals is a common UX anti-pattern that creates frustration.


5. Accessibility & Performance


Accessibility and performance are not optional add-ons; they are foundational pillars of a high-quality user experience. Designing with these constraints in mind leads to better, more robust, and more inclusive products for everyone.


5.1 WCAG 2.1 AA Compliance Checklist


This checklist provides actionable guidelines for ensuring the application meets the widely accepted standard for digital accessibility, with a focus on mobile-first contexts.20
* Perceivable
   * 1.1 Text Alternatives: All non-text content (images, icons without text) that conveys meaning must have a text alternative (alt text).20 Decorative images should have an empty alt="".
   * 1.3 Adaptable: Content must be structured semantically with proper headings (<h1>, <h2>, etc.) and landmarks (<nav>, <main>) so it can be navigated logically by assistive technologies.21
   * 1.4 Distinguishable:
      * Color Contrast: Text must have a contrast ratio of at least 4.5:1 against its background. Large text (18pt or 14pt bold) must have a ratio of 3:1.20
      * Use of Color: Color cannot be the only means of conveying information (e.g., an error field must have an icon and text, not just a red border).21
      * Text Resize: Users must be able to zoom text up to 200% without loss of content or functionality.45
      * Reflow: Content must reflow into a single column without requiring horizontal scrolling at a viewport width of 320 CSS pixels.45
* Operable
   * 2.1 Keyboard Accessible: All interactive functionality must be operable through a keyboard interface, without requiring specific timings for individual keystrokes.20
   * 2.4 Navigable:
      * Focus Order: The focus order for keyboard navigation must be logical and intuitive.21
      * Focus Visible: There must be a visible keyboard focus indicator for all interactive elements.45 The default browser outline should not be removed without providing a clear, high-contrast alternative.
   * 2.5 Input Modalities:
      * Target Size: Touch targets must be at least 44 by 44 CSS pixels to ensure they are easily tappable, especially for users with motor impairments.20
      * Pointer Gestures: Any functionality that uses a multipoint or path-based gesture (e.g., pinch-to-zoom, complex swipe) must have an alternative that can be operated with a single pointer (e.g., '+' and '-' buttons).45
* Understandable
   * 3.2 Predictable: Components that are repeated across multiple pages must appear in a consistent order.20 Navigation and interactions should behave predictably.
   * 3.3 Input Assistance: Form fields must have clear, associated labels. Error messages should be specific and identify the item that is in error.
* Robust
   * 4.1 Compatible: The application must be compatible with current and future user agents, including assistive technologies. This is primarily achieved by using valid HTML and ARIA standards where appropriate.


5.2 Guidelines for Performance-Oriented UI


A beautiful interface that is slow and janky is a failed interface. Performance is a core feature of the user experience.
* Image Optimization:
   * Format: Use modern image formats like WebP or AVIF, which offer better compression than JPEG or PNG.
   * Sizing: Serve images that are appropriately sized for the user's viewport. Do not serve a 4K image for a 300px wide mobile screen.
   * Loading: Implement lazy loading for images that are below the fold to speed up initial page load.
* Animation Performance:
   * Use Compositor Properties: For animations, prioritize using CSS properties that can be handled by the browser's compositor thread, which is separate from the main thread. This ensures smooth, GPU-accelerated animations that don't block user interaction. These properties are transform (translate, scale, rotate) and opacity.
   * Avoid Layout-Triggering Properties: Do not animate properties like width, height, margin, padding, or top/left. Animating these forces the browser to recalculate layout ("reflow"), which is computationally expensive and leads to stuttering or "jank."
* Rendering Performance:
   * Minimize DOM Nodes: Keep the HTML structure as lean and flat as possible. Deeply nested elements increase rendering complexity.
   * Virtualize Long Lists: For any list that could potentially contain hundreds or thousands of items (e.g., a transaction history, a long feed), use a virtualization library. This technique renders only the items currently visible in the viewport, drastically improving performance for large datasets.
   * Code Splitting: Break up the application's JavaScript bundle into smaller chunks that can be loaded on demand. Users shouldn't have to download the code for the "Settings" page when they are only viewing the "Dashboard."
These constraints are not limitations on creativity but are catalysts for better design. The need for high-contrast colors leads to more legible interfaces. The requirement for keyboard navigation enforces a more logical and structured layout. Performance limitations encourage the use of subtle, meaningful micro-interactions over distracting, gratuitous ones. By embracing these principles, the design becomes inherently cleaner, more robust, and more user-friendly for everyone.


6. Code Integration Guidelines (for Cursor)


This section provides the practical, code-level implementation of the design system, specifically tailored for development with React Native, TailwindCSS, and an AI assistant like Sonnet 4.5 or GPT-5 in Cursor. The goal is to create a seamless bridge from design principles to production-ready code.


6.1 TailwindCSS Configuration


The tailwind.config.js file is the source of truth for the design system's tokens in code. By defining the entire system here, we ensure that developers and the AI assistant are constrained to using only pre-approved styles, which is the key to maintaining consistency.46


JavaScript




// tailwind.config.js
const theme = require('tailwindcss/defaultTheme');

module.exports = {
 content: [
   "./App.{js,jsx,ts,tsx}",
   "./src/**/*.{js,jsx,ts,tsx}"
 ],
 theme: {
   extend: {
     colors: {
       primary: '#0A84FF',
       success: '#30D158',
       warning: '#FFD60A',
       error: '#FF453A',
       neutral: {
         0: '#FFFFFF',
         100: '#F9F9F9',
         200: '#F2F2F7',
         400: '#E5E5EA',
         600: '#C6C6C8',
         800: '#636366',
         1000: '#1C1C1E',
       },
     },
     fontFamily: {
       sans: ['Inter',...theme.fontFamily.sans],
       mono: ['ui-monospace', 'Menlo',...theme.fontFamily.mono],
     },
     fontSize: {
       'xs': ['12.8px', '16px'],   // Caption
       'sm': ['14px', '20px'],     // Body Small
       'base': ['16px', '24px'],   // Body
       'lg': ['20px', '28px'],     // Heading SM
       'xl': ['25px', '32px'],     // Heading MD
       '2xl': ['31.25px', '40px'], // Heading LG
       '3xl': ['39.06px', '48px'], // Heading XL
     },
     spacing: {
       '1': '4px',
       '2': '8px',
       '3': '12px',
       '4': '16px',
       '5': '24px',
       '6': '32px',
       '7': '48px',
       '8': '64px',
     },
     borderRadius: {
       'lg': '8px',
       'xl': '12px',
     },
     boxShadow: {
       'sm': '0 1px 2px 0 hsl(220 15% 5% / 0.05), 0 1px 3px 0 hsl(220 15% 5% / 0.1)',
       'md': '0 4px 6px -1px hsl(220 15% 5% / 0.1), 0 2px 4px -2px hsl(220 15% 5% / 0.1)',
       'lg': '0 10px 15px -3px hsl(220 15% 5% / 0.1), 0 4px 6px -4px hsl(220 15% 5% / 0.1)',
     },
   },
 },
 plugins:,
};



6.2 Component Naming Conventions & File Structure


A consistent structure makes the codebase easier to navigate and maintain.
* Component Naming: Component files and their corresponding exports should use PascalCase (e.g., PrimaryButton.tsx). This is a standard convention in the React ecosystem.48
* File Structure: A recommended structure for UI components is to group them by function.
src/
├── components/
│   ├── ui/
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Input.tsx
│   │   └── index.ts  // To export all ui components
│   ├── layout/
│   │   └── Container.tsx
│   └── specific/
│       └── UserProfileCard.tsx



6.3 Prompting Guide for AI Code Generation


The AI assistant is a powerful tool, but its output quality is directly proportional to the prompt's quality. To get expert-level results that adhere to the design system, prompts must be specific, contextual, and reference the system's tokens. The AI should be treated as a literal-minded junior developer who needs an expert-level brief.
   * The Golden Rule of Prompting: Always reference the design system tokens defined in this document. Never ask for abstract qualities ("make it look modern") or magic numbers ("use a 14px margin").
   * Structured Prompt Template:
   1. Role & Goal: Start by setting the context."Act as a senior React Native developer specializing in TailwindCSS. Your goal is to create a reusable and accessible UI component that strictly adheres to our uiux-guidelines.md design system."
   2. Component Definition: Clearly state what to build."Create a PrimaryButton component."
   3. Functional Requirements: Describe its behavior and props."It should accept onPress, title, and disabled props. The underlying component should be a TouchableOpacity."
   4. Styling from Design System (The Most Important Part): Provide explicit instructions using the defined tokens.
"Apply the following styles from our design system:
   * Layout: Use px-4 and py-3 for padding.
   * Sizing: Ensure a minimum height of 44px for touch accessibility.
   * Typography: Use font-sans, text-base, and font-medium.
   * Color: The background should be bg-primary and the text text-neutral-0.
   * Borders: Use rounded-lg.
   * States:
   * On hover, the background should darken slightly (you can use a semi-transparent black overlay or a darker shade if defined).
   * On press, the button should scale down slightly (active:scale-95).
   * When disabled, use bg-neutral-200 for the background, text-neutral-600 for the text, and disable pointer events."
   5. Accessibility: Remind the AI of accessibility requirements."Ensure the component is accessible by setting the accessibilityRole to 'button' and handling the disabled state correctly."
   * Bad vs. Good Prompt Examples:
   * Bad Prompt: "Make a blue button."
   * Result: Generic, uses default Tailwind blue (blue-500), has no defined states, inconsistent padding, and ignores the design system entirely.
   * Good Prompt: The structured prompt detailed above.
   * Result: A component that is perfectly consistent with the design system, fully featured with all states, accessible, and uses the correct design tokens.


6.4 Example Component Template with Rationale


This example demonstrates how to apply the entire system to a single, common component: a Card.


TypeScript




// src/components/ui/Card.tsx

import React from 'react';
import { View, Text, ViewProps } from 'react-native';

// Define the component's props for type safety and clarity.
interface CardProps extends ViewProps {
 title?: string;
 children: React.ReactNode;
}

const Card: React.FC<CardProps> = ({ title, children, style,...props }) => {
 return (
   // Rationale: The base container for the card.
   // - `bg-neutral-0`: Uses the primary background color from our neutral palette.
   // - `border border-neutral-200`: Applies a subtle 1px border using a light neutral color for definition.
   // - `rounded-lg`: Uses the standard 8px border radius for soft corners.
   // - `shadow-md`: Applies the Level 2 elevation shadow for a clean, lifted appearance.
   <View
     style={}
     {...props}
   >
     {/* Rationale: Internal padding adheres to the 8-point grid. `p-4` = 16px. */}
     <View style={{ padding: 16 }}>
       {title && (
         // Rationale: The title uses a semantic text style for hierarchy.
         // - `text-lg`: Maps to our `heading-sm` token (20px).
         // - `font-semibold`: Provides emphasis for the title.
         // - `text-neutral-1000`: Uses the highest contrast neutral color for maximum readability.
         // - `mb-2`: Adds an 8px margin below the title to separate it from the content, following the grid.
         <Text
           style={{
             fontSize: 20,
             lineHeight: 28,
             fontWeight: '600',
             color: '#1C1C1E',
             marginBottom: 8,
           }}
         >
           {title}
         </Text>
       )}
       {/* Rationale: The children prop allows for flexible content composition within the card's structured styling. */}
       {children}
     </View>
   </View>
 );
};

export default Card;

(Note: The example above uses inline styles for clarity in a React Native context, as TailwindCSS class names are applied via a library like nativewind. The comments explain the mapping from design system tokens to specific style properties.)
Works cited
   1. Our Top 5 Design Principles at Revolut, accessed on October 20, 2025, https://www.revolut.com/blog/post/our-top-5-design-principles-at-revolut/
   2. Product Designer (Design Systems) | Revolut United Kingdom, accessed on October 20, 2025, https://www.revolut.com/careers/position/product-designer-design-systems-cd8e0d34-f333-470f-92c0-d5612e87e02f/
   3. Linear Design is the SaaS Trend You Can't Ignore for Better UI | by Formclick - Medium, accessed on October 20, 2025, https://medium.com/@formclick/linear-design-is-the-saas-trend-you-cant-ignore-for-better-ui-79c6161fa2f0
   4. How to Use Linear: Setup, Best Practices, and Hidden Features Guide - Morgen Planner, accessed on October 20, 2025, https://www.morgen.so/blog-posts/how-to-use-linear-setup-best-practices-and-hidden-features
   5. Principles & Practices - Linear Method, accessed on October 20, 2025, https://linear.app/method/introduction
   6. Linear – Plan and build products, accessed on October 20, 2025, https://linear.app/
   7. Operating principles - Stripe, accessed on October 20, 2025, https://stripe.com/jobs/culture
   8. Airbnb's Use of Spacing Creates a Calm UI | by Kirtika Srivastava | Aug, 2025 - Medium, accessed on October 20, 2025, https://medium.com/@kvividsnaps/airbnbs-use-of-spacing-creates-a-calm-ui-d04be85dc3e4
   9. How to elevate your UI Design with depth and clarity | by Ana Stoica, accessed on October 20, 2025, https://www.designsystemscollective.com/how-to-elevate-your-ui-design-with-depth-and-clarity-eb8d43f39a13
   10. 14 Micro-interaction Examples to Enhance UX and Reduce Frustration, accessed on October 20, 2025, https://userpilot.com/blog/micro-interaction-examples/
   11. Micro interactions 2025: еnhancing user experience with subtle details in web design, accessed on October 20, 2025, https://www.stan.vision/journal/micro-interactions-2025-in-web-design
   12. Reimagining Design Systems at Spotify | Spotify Design, accessed on October 20, 2025, https://spotify.design/article/reimagining-design-systems-at-spotify
   13. How Spotify Leverages Design Systems - BTNG.studio, accessed on October 20, 2025, https://www.btng.studio/insights/how-spotify-leverages-design-systems
   14. UX Case Study: Calm Mobile App - Usability Geek, accessed on October 20, 2025, https://usabilitygeek.com/ux-case-study-calm-mobile-app/
   15. Color Theory in UI Design: How to Choose Colors That Convert - KARL Mission, accessed on October 20, 2025, https://www.karlmission.com/blog/color-theory-in-ui-design-how-to-choose-colors-that-convert
   16. Color in UX Design: Theory, Impact & Applying | Ramotion Agency, accessed on October 20, 2025, https://www.ramotion.com/blog/color-in-ux-design/
   17. Revolut's Brand Refresh: Subtle Changes, Big Impact in Fintech, accessed on October 20, 2025, https://fintechbranding.studio/revolut-brand-refresh
   18. mobbin.com, accessed on October 20, 2025, https://mobbin.com/colors/brand/revolut#:~:text=Revolut%20Colors-,Revolut%20Colors,%2C%20White%2C%20and%20Cornflower%20Blue.
   19. A designer's ultimate guide to using Notion, accessed on October 20, 2025, https://www.notion.com/help/guides/a-designers-ultimate-guide-to-using-notion
   20. Does WCAG Apply to Mobile Apps? - AudioEye, accessed on October 20, 2025, https://www.audioeye.com/post/does-wcag-apply-to-mobile-apps/
   21. Checklist for Mobile Applications | accessibility.umich.edu, accessed on October 20, 2025, https://accessibility.umich.edu/how-to/mobile-apps/checklist
   22. Working Type. How we introduced Airbnb Cereal to our… | by Karri ..., accessed on October 20, 2025, https://medium.com/airbnb-design/working-type-81294544608b
   23. Responsive Type Scales: Part 1 tutorial - Uxcel, accessed on October 20, 2025, https://app.uxcel.com/tutorials/responsive-type-scales-part-1-652
   24. Typographic Scale | HarvardSites Design System, accessed on October 20, 2025, https://designsystem.harvardsites.harvard.edu/news/2025/05/typographic-scale
   25. Everything you should know about 8 point grid system in UX design, accessed on October 20, 2025, https://uxplanet.org/everything-you-should-know-about-8-point-grid-system-in-ux-design-b69cb945b18d
   26. What are spacing best practices (8pt grid system, internal ≤ external rule, etc.)? - Cieden, accessed on October 20, 2025, https://cieden.com/book/sub-atomic/spacing/spacing-best-practices
   27. Shadows in UI design: Tips and best practices - LogRocket Blog, accessed on October 20, 2025, https://blog.logrocket.com/ux-design/shadows-ui-design-tips-best-practices/
   28. Design Systems - Stories | Spotify Design, accessed on October 20, 2025, https://spotify.design/stories/design/design-systems
   29. The 8pt Grid: Consistent Spacing in UI Design with Sketch | by Chris Godby - Prototypr, accessed on October 20, 2025, https://blog.prototypr.io/the-8pt-grid-consistent-spacing-in-ui-design-with-sketch-577e4f0fd520
   30. Notion designs, themes, templates and downloadable graphic elements on Dribbble, accessed on October 20, 2025, https://dribbble.com/tags/notion
   31. Recreating Revolut. A Step-by-Step Journey in UI/UX Design | by MOHIT SAHU | Bootcamp, accessed on October 20, 2025, https://medium.com/design-bootcamp/recreating-revolut-fbffc4dff746
   32. Airbnb - Ariel Chan, accessed on October 20, 2025, https://ariellchan.com/airbnb
   33. UI components | Stripe Documentation, accessed on October 20, 2025, https://docs.stripe.com/stripe-apps/components
   34. Stripe Web Elements, accessed on October 20, 2025, https://docs.stripe.com/payments/elements
   35. Linear – Case studies – Radix Primitives, accessed on October 20, 2025, https://www.radix-ui.com/primitives/case-studies/linear
   36. Mobile Onboarding UX: 11 Best Practices for Retention (2025), accessed on October 20, 2025, https://www.designstudiouiux.com/blog/mobile-app-onboarding-best-practices/
   37. Login & Signup Flows course lesson | Uxcel, accessed on October 20, 2025, https://app.uxcel.com/courses/common-patterns/loginsignup-best-practices-854
   38. The essential guide to mobile user onboarding UI/UX patterns - Appcues, accessed on October 20, 2025, https://www.appcues.com/blog/essential-guide-mobile-user-onboarding-ui-ux
   39. UX Best Practices for Passkeys: Understanding Device-Initiated Authentication - Authsignal, accessed on October 20, 2025, https://www.authsignal.com/blog/articles/ux-best-practices-for-passkeys-understanding-device-initiated-authentication
   40. 11 Microinteraction Examples That Improve UX - Whatfix, accessed on October 20, 2025, https://whatfix.com/blog/microinteractions/
   41. 11 User Flow Examples + How to Inform UX Design With Them | by Userpilot Team, accessed on October 20, 2025, https://userpilot.medium.com/11-user-flow-examples-how-to-inform-ux-design-with-them-e0aba228d42c
   42. Navigation Design | Patterns, tips & best practices - Justinmind, accessed on October 20, 2025, https://www.justinmind.com/blog/navigation-design-almost-everything-you-need-to-know/
   43. Dashboard Design: best practices and examples - Justinmind, accessed on October 20, 2025, https://www.justinmind.com/ui-design/dashboard-design-best-practices-ux
   44. Dashboard Design UX Patterns Best Practices - Pencil & Paper, accessed on October 20, 2025, https://www.pencilandpaper.io/articles/ux-pattern-analysis-data-dashboards
   45. Web Content Accessibility Guidelines (WCAG) 2.1 - W3C, accessed on October 20, 2025, https://www.w3.org/TR/WCAG21/
   46. Creating a Design System Using Tailwind for Web Development | by ..., accessed on October 20, 2025, https://medium.com/@ranith2k3/creating-a-design-system-using-tailwind-for-web-development-e32b61d488c4
   47. Scaling a design system with Tailwind CSS | Nearform, accessed on October 20, 2025, https://nearform.com/digital-community/scaling-a-design-system-with-tailwind-css/
   48. Airbnb React/JSX Style Guide, accessed on October 20, 2025, https://airbnb.io/javascript/react/